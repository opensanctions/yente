name: build

on: [push]

permissions:
  packages: write
  id-token: write

jobs:
  test-elasticsearch:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
        env:
          node.name: index
          cluster.name: yente-index
          discovery.type: single-node
          xpack.security.enabled: "false"
          xpack.security.http.ssl.enabled: "false"
          xpack.security.transport.ssl.enabled: "false"
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -y -qq libicu-dev
          pip install -U pip pyicu
          pip install -e ".[dev]"
      - name: Run pytest tests
        env:
          YENTE_INDEX_TYPE: elasticsearch
          YENTE_INDEX_URL: http://localhost:9200/
        run: |
          make test

  test-opensearch:
    runs-on: ubuntu-latest
    services:
      opensearch:
        image: opensearchproject/opensearch:2.15.0
        env:
          node.name: index
          cluster.name: yente-index
          discovery.type: single-node
          plugins.security.disabled: true
          OPENSEARCH_INITIAL_ADMIN_PASSWORD: YenteIns3cureDefault
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -y -qq libicu-dev
          pip install -U pip pyicu
          pip install -e ".[dev]"
      - name: Run pytest tests with opensearch backend
        env:
          YENTE_INDEX_TYPE: opensearch
          YENTE_INDEX_URL: http://localhost:9200/
        run: |
          make test

  package-python:
    runs-on: ubuntu-latest
    needs: [test-elasticsearch, test-opensearch]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -y -qq libicu-dev
          pip install -U pip pyicu
          pip install -e ".[dev]"
      - name: Run mypy strict type check
        run: |
          make typecheck
      - name: Build a distribution
        run: |
          python3 -m build --wheel
      - name: Publish a Python distribution to PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  package-docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/develop'
    needs: [package-python]
    steps:
      - uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/opensanctions/yente
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Debug information
        run: |
          docker --version
          echo "${GITHUB_REF}"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push release
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
